{
  "_args": [
    [
      {
        "raw": "grunt-webfont@^1.4.0",
        "scope": null,
        "escapedName": "grunt-webfont",
        "name": "grunt-webfont",
        "rawSpec": "^1.4.0",
        "spec": ">=1.4.0 <2.0.0",
        "type": "range"
      },
      "/Users/mario/Sites/wevo-chemie.de/grunt_test/wevo"
    ]
  ],
  "_from": "grunt-webfont@>=1.4.0 <2.0.0",
  "_id": "grunt-webfont@1.6.0",
  "_inCache": true,
  "_location": "/grunt-webfont",
  "_nodeVersion": "5.11.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/grunt-webfont-1.6.0.tgz_1472214172583_0.3958899073768407"
  },
  "_npmUser": {
    "name": "sapegin",
    "email": "artem@sapegin.ru"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {
    "argparse": "1.0.9",
    "clap": "1.1.3",
    "coa": "1.0.1",
    "colors": "1.1.2",
    "fs.realpath": "1.0.0",
    "inflight": "1.0.6",
    "inherits": "2.0.3",
    "minimatch": "3.0.3",
    "once": "1.4.0",
    "path-is-absolute": "1.0.1",
    "sax": "1.2.2",
    "source-map": "0.5.6",
    "whet.extend": "0.9.9"
  },
  "_requested": {
    "raw": "grunt-webfont@^1.4.0",
    "scope": null,
    "escapedName": "grunt-webfont",
    "name": "grunt-webfont",
    "rawSpec": "^1.4.0",
    "spec": ">=1.4.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-webfont/-/grunt-webfont-1.6.0.tgz",
  "_shasum": "a0d790f39056d94f340f50b3dc24c9ab4bcabcae",
  "_shrinkwrap": null,
  "_spec": "grunt-webfont@^1.4.0",
  "_where": "/Users/mario/Sites/wevo-chemie.de/grunt_test/wevo",
  "author": {
    "name": "Artem Sapegin",
    "url": "http://sapegin.me/"
  },
  "bugs": {
    "url": "https://github.com/sapegin/grunt-webfont/issues"
  },
  "contributors": [
    {
      "name": "Maxime Thirouin",
      "url": "http://moox.io/"
    }
  ],
  "dependencies": {
    "async": "~1.5.2",
    "chalk": "~1.1.1",
    "glob": "~7.0.0",
    "lodash": "~4.3.0",
    "memorystream": "~0.3.1",
    "mkdirp": "~0.5.1",
    "svg2ttf": "~2.1.1",
    "svgicons2svgfont": "~1.1.0",
    "svgo": "~0.6.1",
    "temp": "~0.8.3",
    "ttf2eot": "~1.3.0",
    "ttf2woff": "~1.3.0",
    "ttf2woff2": "~2.0.3",
    "underscore.string": "~3.2.3",
    "winston": "~2.1.1"
  },
  "description": "Ultimate SVG to webfont converter for Grunt.",
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-cli": "~0.1.13",
    "grunt-contrib-clean": "~1.0.0",
    "grunt-contrib-jshint": "~0.11.3",
    "grunt-contrib-nodeunit": "~0.4.1",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-jscs": "~1.0.0",
    "load-grunt-tasks": "~3.4.0",
    "stylus": "~0.53.0",
    "xml2js": "~0.4.16"
  },
  "directories": {},
  "dist": {
    "shasum": "a0d790f39056d94f340f50b3dc24c9ab4bcabcae",
    "tarball": "https://registry.npmjs.org/grunt-webfont/-/grunt-webfont-1.6.0.tgz"
  },
  "engines": {
    "node": ">=0.12.0"
  },
  "gitHead": "21f3cc57b5858dd5934324002bbfbb8b1ce37003",
  "homepage": "https://github.com/sapegin/grunt-webfont",
  "keywords": [
    "gruntplugin",
    "font",
    "webfont",
    "fontforge",
    "font-face",
    "woff",
    "woff2",
    "ttf",
    "svg",
    "eot",
    "truetype",
    "css",
    "icon"
  ],
  "license": "MIT",
  "main": "tasks/webfont.js",
  "maintainers": [
    {
      "name": "sapegin",
      "email": "artem@sapegin.ru"
    }
  ],
  "name": "grunt-webfont",
  "optionalDependencies": {},
  "peerDependencies": {
    "grunt": ">=0.4.0"
  },
  "readme": "# SVG to webfont converter for Grunt\n\n[![Powered by You](http://sapegin.github.io/powered-by-you/badge.svg)](http://sapegin.github.io/powered-by-you/)\n[![Build Status](https://travis-ci.org/sapegin/grunt-webfont.svg)](https://travis-ci.org/sapegin/grunt-webfont)\n[![Downloads on npm](http://img.shields.io/npm/dm/grunt-webfont.svg?style=flat)](https://www.npmjs.com/package/grunt-webfont)\n\nGenerate custom icon webfonts from SVG files via Grunt. Inspired by [Font Custom](https://github.com/FontCustom/fontcustom).\n\nThis task will make all you need to use font-face icon on your website: font in all needed formats, CSS/Sass/Less/Stylus and HTML demo page.\n\n## Features\n\n* Works on Mac, Windows and Linux.\n* Very flexible.\n* Supports all web font formats: WOFF, WOFF2, EOT, TTF and SVG.\n* Semantic: uses [Unicode private use area](http://bit.ly/ZnkwaT).\n* [Cross-browser](http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax/): IE8+.\n* BEM or Bootstrap output CSS style.\n* CSS preprocessors support.\n* Data:uri embedding.\n* Ligatures.\n* HTML preview.\n* Custom templates.\n\n\n## Installation\n\nThis plugin requires Grunt 0.4. Note that `ttfautohint` is optional, but your generated font will not be properly hinted if it’s not installed. And make sure you don’t use `ttfautohint` 0.97 because that version won’t work.\n\n### OS X\n\n```\nbrew install ttfautohint fontforge --with-python\nnpm install grunt-webfont --save-dev\n```\n\n*You may need to use `sudo` for `brew`, depending on your setup.*\n\n*`fontforge` isn’t required for `node` engine (see below).*\n\n### Linux\n\n```\nsudo apt-get install fontforge ttfautohint\nnpm install grunt-webfont --save-dev\n```\n\n*`fontforge` isn’t required for the `node` engine (see [below](#available-engines)).*\n\n### Windows\n\n```\nnpm install grunt-webfont --save-dev\n```\n\nThen [install `ttfautohint`](http://www.freetype.org/ttfautohint/#download) (optional).\n\nThen install `fontforge`.\n* Download and install [fontforge](http://fontforge.github.io/en-US/downloads/windows/).\n* Add `C:\\Program Files (x86)\\FontForgeBuilds\\bin` to your `PATH` environment variable.\n\n*`fontforge` isn’t required for the `node` engine (see [below](#available-engines)).*\n\n## Available Engines\n\nThere are two font rendering engines available. See also `engine` option below.\n\n### fontforge\n\n#### Pros\n\n* All features supported.\n* The best results.\n\n#### Cons\n\n* You have to install `fontforge`.\n* Really weird bugs sometimes.\n\n### node\n\n#### Pros\n\n* No external dependencies (except optional `ttfautohint`).\n* Works on all platforms.\n\n#### Cons\n\n* Doesn’t work [with some SVG files](https://github.com/fontello/svg2ttf/issues/25).\n* Ligatures aren’t supported.\n\n\n## Configuration\n\nAdd somewhere in your `Gruntfile.js`:\n\n```javascript\ngrunt.loadNpmTasks('grunt-webfont');\n```\n\nInside your `Gruntfile.js` file add a section named `webfont`. See Parameters section below for details.\n\n\n### Parameters\n\n#### src\n\nType: `string|array`\n\nGlyphs list: SVG. String or array. Wildcards are supported.\n\n#### dest\n\nType: `string`\n\nDirectory for resulting files.\n\n#### destCss\n\nType: `string` Default: _`dest` value_\n\nDirectory for resulting CSS files (if different than font directory). You can also define `destScss`, `destSass`, `destLess` and `destStyl` to specify a directory per stylesheet type.\n\n#### Options\n\nAll options should be inside `options` object:\n\n``` javascript\nwebfont: {\n\ticons: {\n\t\tsrc: 'icons/*.svg',\n\t\tdest: 'build/fonts',\n\t\toptions: {\n\t\t\t...\n\t\t}\n\t}\n}\n```\n\n#### font\n\nType: `string` Default: `icons`\n\nName of font and base name of font files.\n\n#### fontFilename\n\nType: `string` Default: Same as `font` option\n\nFilename for generated font files, you can add placeholders for the same data that gets passed to the [template](#template).\n\nFor example, to get the hash to be part of the filenames:\n\n```js\noptions: {\n\tfontFilename: 'icons-{hash}'\n}\n```\n\n#### hashes\n\nType: `boolean` Default: `true`\n\nAppend font file names with unique string to flush browser cache when you update your icons.\n\n#### styles\n\nType: `string|array` Default: `'font,icon'`\n\nList of styles to be added to CSS files: `font` (`font-face` declaration), `icon` (base `.icon` class), `extra` (extra stuff for Bootstrap (only for `syntax` = `'bootstrap'`).\n\n#### types\n\nType: `string|array` Default: `'eot,woff,ttf'`, available: `'eot,woff2,woff,ttf,svg'`\n\nFont files types to generate.\n\n#### order\n\nType: `string|array` Default: `'eot,woff,ttf,svg'`\n\nOrder of `@font-face`’s `src` values in CSS file. (Only file types defined in `types` option will be generated.)\n\n#### syntax\n\nType: `string` Default: `bem`\n\nIcon classes syntax. `bem` for double class names: `icon icon_awesome` or `bootstrap` for single class names: `icon-awesome`.\n\n#### template\n\nType: `string` Default: ``\n\nCustom CSS template path (see `tasks/templates` for some examples). Should be used instead of `syntax`. (You probably need to define `htmlDemoTemplate` option too.)\n\nTemplate is a pair of CSS and JSON (optional) files with the same name.\n\nFor example, your Gruntfile:\n\n```js\noptions: {\n\ttemplate: 'my_templates/tmpl.css'\n}\n```\n\n`my_templates/tmpl.css`:\n\n```css\n@font-face {\n\tfont-family:\"<%= fontBaseName %>\";\n\t...\n}\n...\n```\n\n`my_templates/tmpl.json`:\n\n```json\n{\n\t\"baseClass\": \"icon\",\n\t\"classPrefix\": \"icon_\"\n}\n```\n\nSome extra data is available for you in templates:\n\n* `hash`: a unique string to flush browser cache. Available even if `hashes` option is `false`.\n\n* `fontRawSrcs`: array of font-face’s src values not merged to a single line:\n\n```\n[\n\t[\n\t\t'url(\"icons.eot\")'\n\t],\n\t[\n\t\t'url(\"icons.eot?#iefix\") format(\"embedded-opentype\")',\n\t\t'url(\"icons.woff\") format(\"woff\")',\n\t\t'url(\"icons.ttf\") format(\"truetype\")'\n\t]\n]\n```\n\n\n#### templateOptions\n\nType: `object` Default: `{}`\n\nExtends/overrides CSS template or syntax’s JSON file. Allows custom class names in default css templates.\n\n``` javascript\noptions: {\n\ttemplateOptions: {\n\t\tbaseClass: 'glyph-icon',\n\t\tclassPrefix: 'glyph_'\n\t}\n}\n```\n\n#### stylesheets\n\nType: `array` Default: `['css']` or extension of `template`\n\nStylesheet type. Can be `css`, `sass`, `scss` or `less`. If `sass` or `scss` is used, `_` will prefix the file (so it can be a used as a partial). You can define just `stylesheet` if you are generating just one type.\n\n#### relativeFontPath\n\nType: `string` Default: `null`\n\nCustom font path. Will be used instead of `destCss` *in* CSS file. Useful with CSS preprocessors.\n\n#### version\n\nType: `string` Default: `false`\n\nVersion number added to `.ttf` version of the font (FontForge Engine only). Also used in the heading of the default demo.html template. Useful to align with the version of other assets that are part of a larger system.\n\n#### htmlDemo\n\nType: `boolean` Default: `true`\n\nIf `true`, an HTML file will be available (by default, in `destCSS` folder) to test the render.\n\n#### htmlDemoTemplate\n\nType: `string` Default: `null`\n\nCustom demo HTML template path (see `tasks/templates/demo.html` for an example) (requires `htmlDemo` option to be true).\n\n#### htmlDemoFilename\n\nType: `string` Default: _`fontBaseName` value_\n\nCustom name for the demo HTML file (requires `htmlDemo` option to be true). Useful if you want to name the output something like `index.html` instead of the font name.\n\n#### destHtml\n\nType: `string` Default: _`destCss` value_\n\nCustom demo HTML demo path (requires `htmlDemo` option to be true).\n\n#### embed\n\nType: `string|array` Default: `false`\n\nIf `true` embeds WOFF (*only WOFF*) file as data:uri.\n\nIF `ttf` or `woff` or `ttf,woff` embeds TTF or/and WOFF file.\n\nIf there are more file types in `types` option they will be included as usual `url(font.type)` CSS links.\n\n#### ligatures\n\nType: `boolean` Default: `false`\n\nIf `true` the generated font files and stylesheets will be generated with opentype ligature features. The character sequences to be replaced by the ligatures are determined by the file name (without extension) of the original SVG.\n\nFor example, you have a heart icon in `love.svg` file. The HTML `<h1>I <span class=\"ligature-icons\">love</span> you!</h1>` will be rendered as `I ♥ you!`.\n\n#### rename\n\nType: `function` Default: `path.basename`\n\nYou can use this function to change how file names translates to class names (the part after `icon_` or `icon-`). By default it’s a name of a file.\n\nFor example you can group your icons into several folders and add folder name to class name:\n\n```js\noptions: {\n\trename: function(name) {\n\t\t// .icon_entypo-add, .icon_fontawesome-add, etc.\n\t\treturn [path.basename(path.dirname(name)), path.basename(name)].join('-');\n\t}\n}\n```\n\n#### skip\n\nType: `boolean` Default: `false`\n\nIf `true` task will not be ran. In example, you can skip task on Windows (becase of difficult installation):\n\n```javascript\noptions: {\n\tskip: require('os').platform() === 'win32'\n}\n```\n\n#### engine\n\nType: `string` Default: `fontforge`\n\nFont rendering engine: `fontforge` or `node`. See comparison in [Available Engines](#available-engines) section above.\n\n#### ie7\n\nType: `boolean` Default: `false`\n\nAdds IE7 support using a `*zoom: expression()` hack.\n\n#### optimize\n\nType: `boolean` Default: `true`\n\nIf `false` the SVGO optimization will not be used. This is useful in cases where the optimizer will produce faulty web fonts by removing relevant SVG paths or attributes.\n\n#### normalize\n\nType: `boolean` Default: `false`\n\nWhen using the fontforge engine, if false, glyphs will be generated with a fixed width equal to fontHeight. In most cases, this will produce an extra blank space for each glyph. If set to true, no extra space will be generated. Each glyph will have a width that matches its boundaries.\n\n#### startCodepoint\n\nType: `integer` Default: `0xF101`\n\nStarting codepoint used for the generated glyphs. Defaults to the start of the Unicode private use area.\n\n#### codepoints\n\nType: `object` Default: `null`\n\nSpecific codepoints to use for certain glyphs. Any glyphs not specified in the codepoints block will be given incremented as usual from the `startCodepoint`, skipping duplicates.\n\n```javascript\noptions: {\n\tcodepoints: {\n\t\tsingle: 0xE001\n\t}\n}\n```\n\n#### codepointsFile\nType: `string` Default: `null`\n\nUses and Saves the codepoint mapping by name to this file.\n\nNOTE: will overwrite the set codepoints option.\n\n#### autoHint\n\nType: `boolean` Default: `true`\n\nEnables font auto hinting using `ttfautohint`.\n\n#### round\n\nType: `number` Default: `10e12`\n\nSetup SVG path rounding.\n\n#### fontHeight\n\nType: `number` Default: `512`\n\nThe output font height.\n\n#### fontFamilyName\n\nType: `string` Default: _`font` value_\n\nIf you’d like your generated fonts to have a name that’s different than the `font` value, you can specify this as a string. This will allow a unique display name within design authoring tools when installing fonts locally. For example, your font’s name could be `GitHub Octicons` with a filename of `octicons.ttf`.\n\n```javascript\noptions: {\n\tfontFamilyName: 'GitHub Octicons',\n}\n```\n\n#### descent\n\nType: `number` Default: `64`\n\nThe font descent. The descent should be a positive value. The ascent formula is: `ascent = fontHeight - descent`.\n\n#### callback\n\nType: `function` Default: `null`\n\nAllows for a callback to be called when the task has completed and passes in the filename of the generated font, an array of the various font types created, an array of all the glyphs created and the hash used to flush browser cache.\n\n```javascript\noptions: {\n\tcallback: function(filename, types, glyphs, hash) {\n\t\t// ...\n\t}\n}\n```\n\n#### customOutputs\n\nType: `array` Default: `undefined`\n\nAllows for custom content to be generated and output in the same way as `htmlDemo`.\n\nEach entry in `customOutputs` should be an object with the following parameters:\n\n* `template` - (`string`) the path to the underscore-template you wish to use.\n* `dest` - (`string`) the path to the destination where you want the resulting file to live.\n* `context` \\[optional\\] - (`object`) a hash of values to pass into the context of the template\n\nAt compile-time each template will have access to the same context as the compile-time environment of `htmlDemoTemplate` (as extended by the `context` object, if provided. See config-example below.\n\n#### execMaxBuffer\n If you get stderr maxBuffer exceeded warning message, engine probably logged a lot of warning messages. To see this warnings run grunt in verbose mode `grunt --verbose`. To go over this warning you can try to increase buffer size by this option. Default value is `1024 * 200`\n\n### Config Examples\n\n#### Simple font generation\n\n```javascript\nwebfont: {\n\ticons: {\n\t\tsrc: 'icons/*.svg',\n\t\tdest: 'build/fonts'\n\t}\n}\n```\n\n#### Custom font name, fonts and CSS in different folders\n\n```javascript\nwebfont: {\n\ticons: {\n\t\tsrc: 'icons/*.svg',\n\t\tdest: 'build/fonts',\n\t\tdestCss: 'build/fonts/css',\n\t\toptions: {\n\t\t\tfont: 'ponies'\n\t\t}\n\t}\n}\n```\n\n#### Custom CSS classes\n\n```js\nwebfont: {\n\ticons: {\n\t\tsrc: 'icons/*.svg',\n\t\tdest: 'build/fonts',\n\t\toptions: {\n\t\t\tsyntax: 'bem',\n\t\t\ttemplateOptions: {\n\t\t\t\tbaseClass: 'glyph-icon',\n\t\t\t\tclassPrefix: 'glyph_'\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n#### To use with CSS preprocessor\n\n```javascript\nwebfont: {\n\ticons: {\n\t\tsrc: 'icons/*.svg',\n\t\tdest: 'build/fonts',\n\t\tdestCss: 'build/styles',\n\t\toptions: {\n\t\t\tstylesheet: 'styl',\n\t\t\trelativeFontPath: '/build/fonts'\n\t\t}\n\t}\n}\n```\n\n#### Embedded font file\n\n```javascript\nwebfont: {\n\ticons: {\n\t\tsrc: 'icons/*.svg',\n\t\tdest: 'build/fonts',\n\t\toptions: {\n\t\t\ttypes: 'woff',\n\t\t\tembed: true\n\t\t}\n\t}\n}\n```\n\n#### Custom Outputs\n\n```javascript\nwebfont: {\n\ticons: {\n\t\tsrc: 'icons/*.svg',\n\t\tdest: 'build/fonts',\n\t\toptions: {\n\t\t\tcustomOutputs: [{\n\t\t\t\ttemplate: 'templates/icon-glyph-list-boilerplate.js',\n\t\t\t\tdest: 'build/js/icon-glyph-list.js'\n\t\t\t}, {\n\t\t\t\ttemplate: 'templates/icon-glyph-config-boilerplate.json',\n\t\t\t\tdest: 'build/js/icon-glyphs.json'\n\t\t\t}, {\n\t\t\t\ttemplate: 'templates/icon-web-home.html',\n\t\t\t\tdest: 'build/',\n\t\t\t\tcontext: {\n\t\t\t\t\thomeHeading: 'Your Icon Font',\n\t\t\t\t\thomeMessage: 'The following glyphs are available in this font:'\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t}\n}\n```\n\nWe might then include the following corresponding templates.\n\nThe first, for `icon-glyph-list-boilerplate.js`, a file that outputs a list of icon-glyph slugs.\n\n```\n// file: icon-glyph-list-boilerplate.js\n\n(function(window) {\n\t'use strict';\n\n\tvar iconList = <%= JSON.stringify(glyphs) %>;\n\twindow.iconList = iconList;\n}(this));\n```\n\nThe second, for `icon-glyph-config-boilerplate.json`, a file that dumps all JSON data in the current template context.\n\n```\n// file: icon-glyph-config-boilerplate.json\n\n<%= JSON.stringify(arguments[0], null, '\\t') %>\n```\n\nAnd finally, the third, for `icon-web-home.html`, a file that has access to the values provided in the `context` object supplied.\n\n```\n// file: icon-web-home.html\n\n<!DOCTYPE html>\n<html class=\"no-js\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Context Test</title>\n    </head>\n    <body>\n        <h1><%= homeHeading %></h1>\n        <p><%= homeMessage %></p>\n        <ul>\n        \t<% for (var i = 0; i < glpyhs.length; i++) { %>\n        \t<li><a href=\"#\"><%= glyphs[i] %></a></li>\n        \t<% } %>\n        </ul>\n    </body>\n</html>\n```\n\n## CSS Preprocessors Caveats\n\nYou can change CSS file syntax using `stylesheet` option (see above). It change file extension (so you can specify any) with some tweaks. Replace all comments with single line comments (which will be removed after compilation).\n\n### Sass\n\nIf `stylesheet` option is `sass` or `scss`, `_` will prefix the file (so it can be a used as a partial).\n\n### Less\n\nIf `stylesheet` option is `less`, regular CSS icon classes will be expanded with corresponding Less mixins.\n\nThe Less mixins then may be used like so:\n\n```css\n.profile-button {\n\t.icon-profile;\n}\n```\n\n## Troubleshooting\n\n### I have problems displaying the font in Firefox\n\nFirefox doesn’t allow cross-domain fonts: [Specifications](http://www.w3.org/TR/css3-fonts/#font-fetching-requirements), [Bugzilla Ticket](https://bugzilla.mozilla.org/show_bug.cgi?id=604421), [How to fix it](https://coderwall.com/p/v4uwyq).\n\n### My images are getting corrupted\n\n#### Using the node engine\n\n* Certain SVG's are not supported. See the [svg2ttf](https://github.com/fontello/svg2ttf) project which is used to convert from SVG to TTF (which is then converted forward to WOFF and WOFF2).\n* `autoHint` also adjusts the font file and can cause your font to look different to the SVG, so you could try switching it off (though it may make windows view of the font worse).\n\n#### Using fontforge\n\nCheck the following...\n\n* Your paths are clockwise. Anti-clockwise paths may cause fills to occur differently.\n* Your paths are not overlapping. Overlapping paths will cause one of the areas to be inverted rather than combined. Use an editor to union your two paths together.\n* `autoHint` also adjusts the font file and can cause your font to look different to the SVG, so you could try switching it off (though it may make windows view of the font worse).\n* If you get stderr maxBuffer exceeded warning message, fontforge probably logged a lot of warning messages. To see this warnings run grunt in verbose mode `grunt --verbose`. To go over this warning you can try to increase buffer size by [execMaxBuffer](#execMaxBuffer).\n\n## Changelog\n\nThe changelog can be found on the [Releases page](https://github.com/sapegin/grunt-webfont/releases).\n\n## License\n\nThe MIT License, see the included [License.md](License.md) file.\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/sapegin/grunt-webfont.git"
  },
  "scripts": {
    "test": "grunt --stack"
  },
  "version": "1.6.0"
}
